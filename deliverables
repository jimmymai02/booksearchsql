SELECT * FROM SDW$ERR$_BOOKS_TST;
SELECT * FROM SDW$ERR$_LIBRARY_BRANCH;
SELECT * FROM SDW$ERR$_BOOK_COPIES;
SELECT * FROM SDW$ERR$_BORROWERS_TST;

--IMPORTED ORIGINAL FILES--
SELECT * FROM PROJECT1_BOOKS_LOAD;
SELECT * FROM PROJECT1_LIBRARY_BRANCH_LOAD;
SELECT * FROM PROJECT1_BOOK_COPIES_LOAD;
SELECT * FROM PROJECT1_BORROWERS_LOAD;

--FINISHED TABLES--
SELECT * FROM PROJECT1_BOOKS;
SELECT * FROM PROJECT1_BOOK_AUTHORS;
SELECT * FROM PROJECT1_AUTHORS;
SELECT * FROM PROJECT1_LIBRARY_BRANCH;
SELECT * FROM PROJECT1_BOOK_COPIES;
SELECT * FROM PROJECT1_BORROWERS;
SELECT * FROM PROJECT1_BOOK_LOANS;
SELECT * FROM PROJECT1_FINES;

-- BOOK-- (USING ---ISBN10) 
CREATE TABLE project1_books (
ISBN10 VARCHAR2(15),
TITLE VARCHAR2(260),
AUTHRO VARCHAR(260),
COVER NVARCHAR2(130),
PUBLISHER VARCHAR(130),
PAGES NUMBER(10,0),
CONSTRAINT BooksPK PRIMARY KEY(ISBN10));
INSERT INTO project1_books (ISBN10,TITLE,AUTHRO,COVER,PUBLISHER,PAGES)
SELECT ISBN10,TITLE, AUTHRO,COVER,PUBLISHER,PAGES FROM project1_books_load;
commit;
DROP TABLE project1_books;
SELECT * FROM project1_books;

-- BOOK_AUTHORS (USING----ISBN10)
CREATE TABLE project1_book_authors (
AUTHOR_ID NUMBER(38,0),
ISBN10 VARCHAR2(15),
CONSTRAINT AuthorPK PRIMARY KEY(AUTHOR_ID,ISBN10),
CONSTRAINT AuthroFK FOREIGN KEY(AUTHOR_ID) REFERENCES project1_authors,
CONSTRAINT AuthroFK2 FOREIGN KEY(ISBN10) REFERENCES project1_books);
DROP TABLE PROJECT1_BOOK_AUTHORS;
INSERT INTO project1_book_authors(AUTHOR_ID,ISBN10)
SELECT AUTHOR_ID,ISBN10 FROM ( SELECT a1.AUTHOR_ID,b1.ISBN10
FROM project1_authors a1,project1_books_load b1
WHERE ((b1.AUTHRO LIKE '%' || a1.NAME || ',' || '%')
OR (b1.AUTHRO like '%' || ',' || a1.NAME || '%')
OR (b1.AUTHRO = a1.NAME))) ORDER BY AUTHOR_ID;
commit;
SELECT * FROM project1_book_authors;

-- AUTHORS--
CREATE TABLE project1_authors(
AUTHOR_ID NUMBER(38,0) GENERATED BY DEFAULT ON NULL AS IDENTITY,
NAME VARCHAR2(128),
CONSTRAINT AuthroPk PRIMARY KEY(AUTHOR_ID));
-- FILETERS OUT NAMES THAT ARE NULL--
INSERT INTO project1_authors (NAME) SELECT DISTINCT REGEXP_SUBSTR (AUTHRO, '[^,]+',
1, 1) FROM project1_books_load WHERE REGEXP_SUBSTR (AUTHRO, '[^,]+', 1, 1) IS NOT
NULL;
INSERT INTO project1_authors (NAME) SELECT DISTINCT REGEXP_SUBSTR (AUTHRO, '[^,]+',
1, 2) FROM project1_books_load where REGEXP_SUBSTR (AUTHRO, '[^,]+', 1, 2) IS NOT
NULL;
INSERT INTO project1_authors (NAME) SELECT DISTINCT REGEXP_SUBSTR (AUTHRO, '[^,]+',
1, 3) FROM project1_books_load where REGEXP_SUBSTR (AUTHRO, '[^,]+', 1, 3) IS NOT
NULL;
INSERT INTO project1_authors (NAME) SELECT DISTINCT REGEXP_SUBSTR (AUTHRO, '[^,]+',
1, 4) FROM project1_books_load where REGEXP_SUBSTR (AUTHRO, '[^,]+', 1, 4) IS NOT
NULL;
INSERT INTO project1_authors (NAME) SELECT DISTINCT REGEXP_SUBSTR (AUTHRO, '[^,]+',
1, 5) FROM project1_books_load WHERE REGEXP_SUBSTR (AUTHRO, '[^,]+', 1, 5) IS NOT
NULL;
commit;
DROP TABLE project1_authors;
SELECT * FROM project1_authors;

-- LIBRARY BRANCH-- 
CREATE TABLE project1_library_branch (
BRANCH_ID NUMBER(38,0),
BRANCH_NAME VARCHAR2(26),
ADDRESS VARCHAR2(128),
CONSTRAINT BranchPk PRIMARY KEY(BRANCH_ID));
INSERT INTO project1_library_branch (BRANCH_ID,BRANCH_NAME,ADDRESS)
SELECT BRANCH_ID,BRANCH_NAME,ADDRESS FROM project1_library_branch_load;
commit;
DROP TABLE PROJECT1_LIBRARY_BRANCH;
SELECT * FROM PROJECT1_LIBRARY_BRANCH;

-- BOOK_COPIES ---
CREATE TABLE project1_book_copies(
BOOK_ID VARCHAR2(20),
ISBN10 VARCHAR2(20),
BRANCH_ID NUMBER(38,0),
NO_OF_COPIES NUMBER(38,0),
CONSTRAINT CopiesPk PRIMARY KEY(BOOK_ID));
DROP TABLE project1_book_copies;
ALTER TABLE project1_book_copies
ADD FOREIGN KEY (BRANCH_ID) REFERENCES project1_library_branch(BRANCH_ID);
ALTER TABLE project1_book_copies
ADD FOREIGN KEY (ISBN10) REFERENCES project1_books(ISBN10);

-- SEQUENCE CREATED FOR ID CREATION
CREATE SEQUENCE BOOK_ID START WITH 1 INCREMENT BY 1;
INSERT INTO PROJECT1_BOOK_COPIES
SELECT BOOK_ID.nextval,BOOK_ID,BRANCH_ID,NO_OF_COPIES FROM PROJECT1_BOOK_COPIES_LOAD;
commit;
SELECT * FROM PROJECT1_BOOK_COPIES;

-- BORROWER--
CREATE TABLE project1_borrowers(
CARD_NO NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
SSN VARCHAR2(26),
FIRST_NAME VARCHAR2(26) ,
LAST_NAME VARCHAR2(26),
EMAIL VARCHAR2(128),
ADDRESS VARCHAR2(128),
CITY VARCHAR2(26),
STATE VARCHAR2(26) ,
PHONE VARCHAR2(26),
CONSTRAINT BorrowersPk PRIMARY KEY(CARD_NO));
INSERT INTO project1_borrowers
(SSN,FIRST_NAME,LAST_NAME,EMAIL,ADDRESS,CITY,STATE,PHONE)
SELECT SSN,FIRST_NAME,LAST_NAME,EMAIL,ADDRESS,CITY,STATE,PHONE FROM
project1_borrowers_load;
commit;
DROP TABLE project1_borrowers;
SELECT * FROM project1_borrowers;

-- BOOK_LOANS-- 
CREATE TABLE project1_book_loans(
LOAN_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
BOOK_ID VARCHAR2(20),
CARD_NO NUMBER,
DATE_OUT DATE,
DUE_DATE DATE,
DATE_IN DATE,
CONSTRAINT LoansPk PRIMARY KEY(LOAN_ID),
CONSTRAINT LoansFk FOREIGN KEY(CARD_NO) REFERENCES project1_borrowers,
CONSTRAINT LoansFk2 FOREIGN KEY(BOOK_ID) REFERENCES project1_book_copies);
DROP TABLE project1_book_loans;
DROP TABLE project1_borrowers_tmp;
DROP TABLE project1_loanstmp;

--temporary borrowers table--
CREATE TABLE project1_borrowers_tmp (
ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
CARD_NO NUMBER);
INSERT INTO project1_borrowers_tmp (CARD_NO)
SELECT b.CARD_NO from project1_borrowers b;
SELECT * FROM project1_borrowers_tmp;

--temporary loans table--
CREATE TABLE project1_loanstmp(BOOK_ID NUMBER);
INSERT INTO project1_loanstmp(BOOK_ID) (SELECT c.BOOK_ID from project1_book_copies
c where rownum<=400);
SELECT * FROM project1_loanstmp;

-- now inserting it into actual table --
INSERT INTO project1_book_loans (BOOK_ID) (SELECT BOOK_ID FROM project1_loanstmp
WHERE rownum<=200);
INSERT INTO project1_book_loans (BOOK_ID) (SELECT BOOK_ID FROM project1_book_loans
WHERE rownum<=100);
INSERT INTO project1_book_loans (BOOK_ID) (SELECT BOOK_ID FROM project1_loanstmp
WHERE rownum<=100);
UPDATE project1_book_loans bl SET bl.CARD_NO = (SELECT CARD_NO FROM
project1_borrowers_tmp bt where bl.LOAN_ID=bt.ID);
UPDATE project1_book_loans bl SET bl.DATE_OUT=sysdate-rownum;
UPDATE project1_book_loans bl SET bl.DUE_DATE= bl.DATE_OUT + 14;
UPDATE project1_book_loans bl SET bl.DATE_IN = bl.DATE_OUT + 15 WHERE LOAN_ID>=0
AND LOAN_ID<200;
UPDATE project1_book_loans bl SET bl.DATE_IN= bl.DATE_OUT + 12 WHERE LOAN_ID>=200
AND LOAN_ID<278;
UPDATE project1_book_loans bl SET bl.DATE_IN= bl.DATE_OUT + 5 WHERE LOAN_ID>=278
AND LOAN_ID<378;
commit;
SELECT * FROM project1_book_loans;

-- FINES -- 
CREATE TABLE project1_fines(
LOAN_ID NUMBER(38,0) ,
FINE_AMT NUMBER(38,0),
PAID VARCHAR2(28) ,
BOOK_ID varchar2(20)NOT NULL,
DUE_DATE DATE NOT NULL,
DATE_IN DATE,
CONSTRAINT FinesPk PRIMARY KEY(LOAN_ID),
CONSTRAINT FinesFk FOREIGN KEY(LOAN_ID) REFERENCES project1_book_loans);
DROP TABLE project1_fines;
INSERT INTO project1_fines(LOAN_ID,DUE_DATE,DATE_IN,BOOK_ID)
SELECT LOAN_ID ,DUE_DATE,DATE_IN,BOOK_ID FROM project1_book_loans bl
WHERE bl.DATE_IN IS NULL OR bl.DATE_IN>bl.DUE_DATE;
UPDATE project1_fines f SET FINE_AMT=(
SELECT 10*(DATE_IN-DUE_DATE) FROM project1_book_loans bl
WHERE f.LOAN_ID= bl.LOAN_ID
AND DATE_IN>DUE_DATE
AND DATE_IN IS NOT NULL);
UPDATE project1_fines f SET PAID=
CASE WHEN FINE_AMT IS NULL
THEN 'NO'
ELSE 'YES'
END;
commit;
SELECT * FROM PROJECT1_FINES;

-- BOOK SEARCH and AVAILABILITY --
SELECT PROJECT1_BOOKS.ISBN10, PROJECT1_BOOKS.TITLE, PROJECT1_AUTHORS.NAME
FROM PROJECT1_BOOKS
JOIN PROJECT1_BOOK_AUTHORS
ON PROJECT1_BOOKS.ISBN10 = PROJECT1_BOOK_AUTHORS.ISBN10
JOIN PROJECT1_AUTHORS
ON PROJECT1_AUTHORS.AUTHOR_ID = PROJECT1_BOOK_AUTHORS.AUTHOR_ID
WHERE PROJECT1_BOOKS.TITLE LIKE '%john'
OR PROJECT1_AUTHORS.NAME LIKE '%John%';

--1ST REPORT--
--TOP 10 GREATEST FINE BY BORROWERS THAT WERE PAID OFF--
SELECT PROJECT1_BORROWERS.FIRST_NAME,PROJECT1_FINES.FINE_AMT FROM
PROJECT1_BOOK_LOANS
INNER JOIN PROJECT1_FINES
on PROJECT1_BOOK_LOANS.LOAN_ID=PROJECT1_FINES.LOAN_ID
INNER JOIN PROJECT1_BORROWERS
on PROJECT1_BOOK_LOANS.CARD_NO=PROJECT1_BORROWERS.CARD_NO
WHERE PAID='YES' AND ROWNUM<=10
ORDER BY fine_amt DESC;

--2ND REPORT-- 
--TOP BRANCHs WITH THE HIGHEST OUTSTANDING FINE AMOUNT--
SELECT project1_library_branch.branch_name, PROJECT1_LIBRARY_BRANCH.branch_id, SUM(PRO
JECT1_FINES.fine_amt) AS Outstanding_Fine_Amount
FROM project1_fines,project1_book_loans ,project1_book_copies,project1_library_branch
WHERE PROJECT1_FINES.loan_id = PROJECT1_BOOK_LOANS.loan_id AND PROJECT1_BOOK_LOANS.boo
k_id = PROJECT1_BOOK_COPIES.book_id
AND PROJECT1_BOOK_COPIES.branch_id = PROJECT1_LIBRARY_BRANCH.branch_id
GROUP BY PROJECT1_LIBRARY_BRANCH.branch_name, PROJECT1_LIBRARY_BRANCH.branch_id
ORDER BY Outstanding_Fine_Amount DESC;

--3RD REPORT-- 
--TOP BOOK TITLES THAT WERE CHECKED OUT BY BORROWERS--
SELECT PROJECT1_BOOK_COPIES.ISBN10,TITLE,COUNT(PROJECT1_BOOK_LOANS.BOOK_ID) AS Count F
ROM
PROJECT1_BOOK_LOANS, PROJECT1_BOOK_COPIES, PROJECT1_BOOKS
WHERE PROJECT1_BOOK_LOANS.BOOK_ID = PROJECT1_BOOK_COPIES.BOOK_ID AND PROJECT1_BOOK_COP
IES.ISBN10 = PROJECT1_BOOKS.ISBN10 AND PROJECT1_BOOK_LOANS.BOOK_ID IN
(SELECT BOOK_ID FROM ( SELECT BOOK_ID,COUNT(BOOK_ID) AS MAX FROM
PROJECT1_BOOK_LOANS GROUP BY BOOK_ID ORDER BY MAX DESC )
WHERE ROWNUM<6) GROUP BY TITLE,PROJECT1_BOOK_COPIES.ISBN10;
